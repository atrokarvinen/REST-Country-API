{"version":3,"sources":["components/CountryCard.tsx","components/CountryCards.tsx","components/CountrySearchArea.tsx","services/RestCountryProvider.ts","components/CountryInformationText.tsx","components/CountryDetails.tsx","components/Content.tsx","components/Header.tsx","components/Layout.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CountryCard","country","countryCardClicked","countryName","name","common","population","region","capital","CountryCardText","label","textValue","className","onClick","src","flags","svg","alt","style","borderBottom","toLocaleString","CountryCards","countries","sortedCountries","sort","countryA","countryB","nameA","nameB","sortCountries","map","index","listCountries","CountrySearchArea","countryProvider","setCountries","setFilteredCountries","useState","countrySearchText","setCountrySearchText","undefined","selectedRegion","setSelectedRegion","useEffect","GetCountriesAsync","then","filterCountries","filteredCountriesByName","FilterCountriesByName","filteredCountries","FilterCountriesByRegion","process","width","placeholder","type","value","onChange","e","target","GetRegions","RestCountryProvider","restEndPoint","stringsMatchInLowerCase","stringA","stringB","toLowerCase","stringIncludesInLowerCase","string","searchWord","lowerCaseString","lowerCaseSearchWord","includes","this","a","fetch","response","json","countryAbbreviations","i","length","cca3","regionNames","Array","from","Set","regionName","filter","CountryInformationText","CountryDetails","languagesStr","backButtonClick","officialName","official","nativeNames","nativeName","Object","values","subregion","currencies","languages","borders","languageCount","keys","key","join","currenciesStr","languagesLabel","currencyCount","currenciesLabel","alignSelf","borderCountry","disabled","Content","displayedContent","selectedCountry","setSelectedCountry","GetCountryAbbreviations","Header","document","body","classList","toggle","Layout","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e8884550.chunk.js","sourcesContent":["import './CountryStyles.css'\r\n\r\nimport React, { ReactElement } from 'react'\r\nimport { Country } from '../models/country'\r\n\r\ninterface CountryCardProps {\r\n    country: Country;\r\n    countryCardClicked: (country: Country) => void;\r\n}\r\n\r\nexport default function CountryCard({ country, countryCardClicked }: CountryCardProps): ReactElement {\r\n    const countryName = country.name.common\r\n    const { population, region, capital } = country\r\n\r\n    const CountryCardText = (label: string, textValue: string): JSX.Element => {\r\n        return (\r\n            <span>\r\n                <span className=\"info-text-bold\">{label}: </span>\r\n                {textValue ?? 'N/A'}\r\n            </span>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"country-card\" onClick={() => countryCardClicked(country)}>\r\n            <img className=\"country-card__img\"\r\n                src={country.flags.svg}\r\n                alt=''\r\n                style={{ borderBottom: '1px solid black' }} />\r\n            <div className=\"country-card__info\">\r\n                <h2>{countryName}</h2>\r\n                {CountryCardText(\"Population\", population.toLocaleString())}\r\n                {CountryCardText(\"Region\", region)}\r\n                {CountryCardText(\"Capital\", capital)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import './CountryStyles.css'\r\n\r\nimport { ReactElement } from 'react'\r\nimport { Country } from '../models/country';\r\nimport CountryCard from './CountryCard';\r\n\r\n\r\ninterface CountryCardsProps {\r\n  countries: Country[];\r\n  countryCardClicked: (country: Country) => void;\r\n}\r\n\r\nexport default function CountryCards({ countries, countryCardClicked }: CountryCardsProps): ReactElement {\r\n\r\n  const sortCountries = (countries: Country[]): Country[] => {\r\n    const countriesInAlphabeticOrder = countries.sort((countryA, countryB) => {\r\n      const nameA = countryA.name.common;\r\n      const nameB = countryB.name.common;\r\n      if (nameA > nameB) {\r\n        return 1;\r\n      }\r\n      else if (nameA < nameB) {\r\n        return -1;\r\n      }\r\n      else {\r\n        return 0;\r\n      }\r\n    })\r\n    return countriesInAlphabeticOrder;\r\n  }\r\n\r\n  const listCountries = () => {\r\n    const sortedCountries = sortCountries(countries)\r\n    return sortedCountries.map((country, index) => {\r\n      if (index > 7) {\r\n        return null\r\n      }\r\n      return <CountryCard key={index} country={country} countryCardClicked={countryCardClicked}/>\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className=\"country-cards\">\r\n      {listCountries()}\r\n    </div>\r\n  )\r\n}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\n\r\nimport './CountryStyles.css'\r\n\r\nimport { ReactElement, useEffect, useState } from 'react'\r\nimport { ICountryProvider } from '../services/ICountryProvider'\r\nimport { Country } from '../models/country'\r\nimport { Region } from '../models/region'\r\n\r\ninterface CountrySearchAreaProps {\r\n    countryProvider: ICountryProvider\r\n    countries: Country[];\r\n    setCountries: (countries: Country[]) => void;\r\n    setFilteredCountries: (countries: Country[]) => void;\r\n}\r\n\r\nexport default function CountrySearchArea(\r\n    {\r\n        countryProvider,\r\n        countries,\r\n        setCountries,\r\n        setFilteredCountries\r\n    }: CountrySearchAreaProps): ReactElement {\r\n    const [countrySearchText, setCountrySearchText] = useState('')\r\n    const [selectedRegion, setSelectedRegion] = useState<string | undefined>(undefined)\r\n\r\n    useEffect(() => {\r\n        countryProvider.GetCountriesAsync()\r\n            .then(countries => setCountries(countries))\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        filterCountries()\r\n    }, [countries, countrySearchText, selectedRegion])\r\n\r\n    const filterCountries = () => {\r\n        const filteredCountriesByName = countryProvider.FilterCountriesByName(countries, countrySearchText)\r\n        const filteredCountries = countryProvider.FilterCountriesByRegion(filteredCountriesByName, selectedRegion)\r\n        setFilteredCountries(filteredCountries)\r\n    }\r\n\r\n    const getRegionOptions = () => {\r\n        const regions: Region[] = countryProvider.GetRegions(countries);\r\n        return regions.map((region, index) => {\r\n            return <option key={index} value={region.name} label={region.name} />\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"search-area\">\r\n            <div className=\"search-area__country-textbox\">\r\n                <img src={`${process.env.PUBLIC_URL}/search-light.svg`} alt=\"search icon\" />\r\n                <input\r\n                    style={{ width: '100%' }}\r\n                    placeholder=\"Search for a country...\"\r\n                    type=\"search\"\r\n                    value={countrySearchText}\r\n                    onChange={e => setCountrySearchText(e.target.value)}>\r\n                </input>\r\n            </div>\r\n            <select\r\n                className=\"search-area__region-dropdown\"\r\n                placeholder=\"Select a region...\"\r\n                value={selectedRegion}\r\n                onChange={e => setSelectedRegion(e.target.value)}\r\n            >\r\n                <option value={undefined} label=\"Select a region...\" />\r\n                {getRegionOptions()}\r\n            </select>\r\n        </div>\r\n    )\r\n}\r\n","import { Country } from \"../models/country\";\r\nimport { Region } from \"../models/region\";\r\nimport { ICountryProvider } from \"./ICountryProvider\";\r\n\r\nexport class RestCountryProvider implements ICountryProvider {\r\n    restEndPoint: string;\r\n\r\n    constructor(restEndPoint: string) {\r\n        this.restEndPoint = restEndPoint;\r\n    }\r\n\r\n    async GetCountriesAsync(): Promise<Country[]> {\r\n        const response = await fetch(this.restEndPoint);\r\n        const countries: Country[] = await response.json()\r\n\r\n        return countries;\r\n    }\r\n\r\n    GetCountryAbbreviations(countries: Country[]): Record<string, Country> {\r\n        const countryAbbreviations: Record<string, Country> = {}\r\n        for (let i = 0; i < countries.length; i++) {\r\n            countryAbbreviations[countries[i].cca3] = countries[i]\r\n        }\r\n        return countryAbbreviations\r\n    }\r\n\r\n    GetRegions(countries: Country[]): Region[] {\r\n        const regionNames: string[] = countries.map((country) => country.region)\r\n        const uniqueNames: string[] = Array.from(new Set(regionNames));\r\n        const regions: Region[] = uniqueNames.map((regionName) => { return { name: regionName } })\r\n        return regions;\r\n    }\r\n\r\n    FilterCountriesByName(countries: Country[], filter: string): Country[] {\r\n        if (filter.length === 0)\r\n            return countries;\r\n\r\n        const filteredCountries = countries.filter((country) => {\r\n            const countryName = country.name.common\r\n            return this.stringIncludesInLowerCase(countryName, filter);\r\n        })\r\n        return filteredCountries;\r\n    }\r\n\r\n    FilterCountriesByRegion(countries: Country[], region: string | undefined): Country[] {\r\n        if (region === undefined || region.length === 0)\r\n            return countries;\r\n\r\n        const filteredCountries = countries.filter((country) => {\r\n            const regionName = country.region\r\n            return this.stringsMatchInLowerCase(regionName, region);\r\n        })\r\n        return filteredCountries;\r\n    }\r\n\r\n    stringsMatchInLowerCase = (stringA: string, stringB: string): boolean => {\r\n        const lowerCaseStringA = stringA.toLowerCase();\r\n        const lowerCaseStringB = stringB.toLowerCase();\r\n        return lowerCaseStringA === lowerCaseStringB;\r\n    }\r\n\r\n    stringIncludesInLowerCase = (string: string, searchWord: string): boolean => {\r\n        const lowerCaseString = string.toLowerCase();\r\n        const lowerCaseSearchWord = searchWord.toLowerCase();\r\n        return lowerCaseString.includes(lowerCaseSearchWord);\r\n    }\r\n}","import React, { ReactElement } from 'react'\r\n\r\ninterface CountryInformationTextProps {\r\n    label: string,\r\n    textValue: string | number | undefined,\r\n}\r\n\r\nexport default function CountryInformationText({ label, textValue }: CountryInformationTextProps): ReactElement {\r\n    return (\r\n        <p>\r\n            <span className=\"info-text-bold\">{label}: </span>\r\n            {textValue ?? 'N/A'}\r\n        </p>\r\n    )\r\n}\r\n","import './CountryStyles.css'\r\n\r\nimport React, { ReactElement } from 'react'\r\nimport { Country } from '../models/country'\r\nimport CountryInformationText from './CountryInformationText'\r\n\r\ninterface CountryDetailsProps {\r\n    country: Country;\r\n    backButtonClick: () => void;\r\n    countryAbbreviations: Record<string, Country>\r\n}\r\n\r\nexport default function CountryDetails({ country, backButtonClick, countryAbbreviations }: CountryDetailsProps): ReactElement {\r\n    const name = country.name.common\r\n    const officialName = country.name.official\r\n    const nativeNames = country.name.nativeName\r\n    const nativeName = nativeNames === undefined ? \"N/A\" : Object.values(nativeNames)[0].common\r\n    const { population, region, subregion, capital, currencies, languages, flags, borders } = country\r\n\r\n    const languageCount = languages === undefined ? 0 : Object.keys(languages).length;\r\n    let languagesStr: string;\r\n    if (languageCount === 0) {\r\n        languagesStr = \"N/A\"\r\n    } else {\r\n        languagesStr = Object.keys(languages).map(key => languages[key]).join(\", \");\r\n    }\r\n    const languagesLabel = languageCount > 1 ? \"Languages\" : \"Language\";\r\n\r\n    const currencyCount = currencies === undefined ? 0 : Object.keys(currencies).length;\r\n    let currenciesStr: string;\r\n    if (currencyCount === 0) {\r\n        currenciesStr = \"N/A\";\r\n    } else {\r\n        currenciesStr = Object.keys(currencies).map(key => currencies[key].name).join(\", \");\r\n    }\r\n    const currenciesLabel = currencyCount > 1 ? \"Currencies\" : \"Currency\";\r\n\r\n    const BorderCountries = (): JSX.Element | JSX.Element[] => {\r\n        const hasBorderCountries = borders?.length > 0\r\n        if (hasBorderCountries) {\r\n            return borders.map(borderCountry => {\r\n                const country = countryAbbreviations[borderCountry]\r\n                const countryName = country.name.common;\r\n                return <button\r\n                    key={countryName}\r\n                    className=\"border-country-button\"\r\n                    disabled>\r\n                    {countryName}\r\n                </button>\r\n            })\r\n        }\r\n        else {\r\n            return <span> Country has no border countries.</span>\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"country-details\">\r\n            <div className=\"country-details__back\">\r\n                <button className=\"country-details__back__button\" onClick={backButtonClick}>\r\n                    <img src={`${process.env.PUBLIC_URL}/corner-down-left-light.svg`} alt=\"return icon\" />\r\n                </button>\r\n            </div>\r\n            <img className=\"country-details__image\" src={flags.svg} alt=\"Country flag\" />\r\n            <div className=\"country-details__info\">\r\n                <h1 className=\"country-details__info__heading\">{name}</h1>\r\n                <div className=\"country-details__info__texts\">\r\n                    <CountryInformationText label=\"Official name\" textValue={officialName} />\r\n                    <CountryInformationText label=\"Native name\" textValue={nativeName} />\r\n                    <CountryInformationText label=\"Population\" textValue={population.toLocaleString()} />\r\n                    <CountryInformationText label=\"Region\" textValue={region} />\r\n                    <CountryInformationText label=\"Sub region\" textValue={subregion} />\r\n                    <CountryInformationText label=\"Capital\" textValue={capital} />\r\n                    <CountryInformationText label={currenciesLabel} textValue={currenciesStr} />\r\n                    <CountryInformationText label={languagesLabel} textValue={languagesStr} />\r\n                </div>\r\n                <div className=\"country-details__info__border-countries\">\r\n                    <span className=\"info-text-bold\" style={{ alignSelf: 'center' }}>Border countries: </span>\r\n                    {BorderCountries()}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import './CountryStyles.css'\r\n\r\nimport { Fragment, ReactElement, useState } from 'react'\r\nimport CountryCards from './CountryCards'\r\nimport CountrySearchArea from './CountrySearchArea'\r\nimport { Country } from '../models/country'\r\nimport { ICountryProvider } from '../services/ICountryProvider'\r\nimport { RestCountryProvider } from '../services/RestCountryProvider'\r\nimport CountryDetails from './CountryDetails'\r\n\r\nexport default function Content(): ReactElement {\r\n    const [countries, setCountries] = useState<Country[]>([])\r\n    const [filteredCountries, setFilteredCountries] = useState<Country[]>([])\r\n\r\n    const [selectedCountry, setSelectedCountry] = useState<Country | undefined>(undefined)\r\n\r\n    const restEndPoint: string = 'https://restcountries.com/v3.1/all';\r\n    const countryProvider: ICountryProvider = new RestCountryProvider(restEndPoint);\r\n\r\n    let displayedContent: JSX.Element;\r\n\r\n    const isDetailsVisible = selectedCountry !== undefined\r\n    if (isDetailsVisible) {\r\n        displayedContent = <CountryDetails\r\n            country={selectedCountry}\r\n            backButtonClick={() => setSelectedCountry(undefined)}\r\n            countryAbbreviations={countryProvider.GetCountryAbbreviations(countries)} />\r\n    } else {\r\n        displayedContent = (\r\n            <Fragment>\r\n                <CountrySearchArea\r\n                    countries={countries}\r\n                    setCountries={setCountries}\r\n                    setFilteredCountries={setFilteredCountries}\r\n                    countryProvider={countryProvider} />\r\n                <CountryCards countries={filteredCountries} countryCardClicked={country => setSelectedCountry(country)} />\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"content\">\r\n            {displayedContent}\r\n        </div>\r\n    )\r\n}\r\n","import './CountryStyles.css'\r\n\r\nimport { ReactElement } from 'react'\r\n\r\nexport default function Header(): ReactElement {\r\n\r\n    const toggleDarkMode = () => {\r\n        document.body.classList.toggle(\"dark-mode\")\r\n    }\r\n\r\n    return (\r\n        <div className=\"header\">\r\n            <h1>What in the world?</h1>\r\n            <button className=\"header__dark-mode-button\" onClick={toggleDarkMode}>\r\n                <img src={`${process.env.PUBLIC_URL}/moon-light.svg`} alt=\"dark mode moon\" />\r\n                <span>Dark mode</span>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n","import './CountryStyles.css'\r\n\r\nimport { ReactElement } from 'react'\r\nimport Content from './Content'\r\nimport Header from './Header'\r\n\r\nexport default function Layout(): ReactElement {\r\n    return (\r\n        <div className=\"layout\">\r\n            <Header />\r\n            <Content />\r\n        </div>\r\n    )\r\n}\r\n","import Layout from './components/Layout';\r\n\r\nfunction App() {\r\n  return <Layout />\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}